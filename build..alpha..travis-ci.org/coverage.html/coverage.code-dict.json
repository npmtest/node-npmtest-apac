{"/home/travis/build/npmtest/node-npmtest-apac/test.js":"/* istanbul instrument in package npmtest_apac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apac/lib.npmtest_apac.js":"/* istanbul instrument in package npmtest_apac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_apac = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_apac = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-apac/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-apac && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_apac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_apac\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_apac.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_apac.rollup.js'] =\n            local.assetsDict['/assets.npmtest_apac.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_apac.__dirname + '/lib.npmtest_apac.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-apac/node_modules/apac/lib/apac.js":"exports.OperationHelper = require('./operation-helper').OperationHelper\nexports.RequestSignatureHelper = require('./request-signature-helper').RequestSignatureHelper\n","/home/travis/build/npmtest/node-npmtest-apac/node_modules/apac/lib/operation-helper.js":"\"use strict\"\n\nconst RSH = require('./request-signature-helper').RequestSignatureHelper\nconst Throttler = require('./throttler')\nconst locale = require('./locale')\n\nconst http = require('http')\nconst xml2js = require('xml2js')\n\nconst defaultXml2JsOptions = {\n    explicitArray: false\n}\n\nclass OperationHelper {\n    constructor(params) {\n        params = params || {}\n\n        // check requried params\n        if (typeof(params.awsId) === 'undefined') {\n            throw new Error('Missing AWS Id param')\n        }\n        if (typeof(params.awsSecret) === 'undefined') {\n            throw new Error('Missing AWS Secret param')\n        }\n        if (typeof(params.assocId) === 'undefined') {\n            throw new Error('Missing Associate Id param')\n        }\n\n        // set instance variables from params\n        this.awsId = params.awsId\n        this.awsSecret = params.awsSecret\n        this.assocId = params.assocId\n        this.endPoint = params.endPoint || locale.getEndpointForLocale(params.locale)\n        this.scheme = params.scheme\n        this.baseUri = params.baseUri || OperationHelper.defaultBaseUri\n        this.xml2jsOptions = Object.assign({}, defaultXml2JsOptions, params.xml2jsOptions)\n        this.throttler = new Throttler(params.maxRequestsPerSecond)\n\n        // set version\n        if (typeof(params.version) === 'string') OperationHelper.version = params.version\n    }\n\n    getSignatureHelper() {\n        if (typeof(this.signatureHelper) === 'undefined') {\n            var params = {}\n            params[RSH.kAWSAccessKeyId] = this.awsId\n            params[RSH.kAWSSecretKey] = this.awsSecret\n            params[RSH.kEndPoint] = this.endPoint\n            this.signatureHelper = new RSH(params)\n        }\n        return this.signatureHelper\n    }\n\n    generateParams(operation, params) {\n        params.Service = OperationHelper.service\n        params.Version = OperationHelper.version\n        params.Operation = operation\n        params.AWSAccessKeyId = this.awsId\n        params.AssociateTag = this.assocId\n        return params\n    }\n\n    generateUri(operation, params) {\n        params = this.generateParams(operation, params)\n        var helper = this.getSignatureHelper()\n        params = helper.sign(params)\n        var queryString = helper.canonicalize(params)\n        return this.baseUri + '?' + queryString\n    }\n\n    execute(operation, params, callback) {\n        const throttledAction = () => this._execute(operation, params, callback)\n        return this.throttler.execute(throttledAction)\n    }\n\n    _execute(operation, params, callback) {\n        if (typeof(operation) === 'undefined') {\n            throw new Error('Missing operation parameter')\n        }\n        if (typeof(params) === 'undefined') {\n            params = {}\n        }\n\n        var uri = this.generateUri(operation, params)\n        var host = this.endPoint\n        var scheme = this.scheme\n        var xml2jsOptions = this.xml2jsOptions\n\n        var options = {\n            hostname: host,\n            path: uri,\n            method: 'GET'\n        }\n\n        if (scheme) options['scheme'] = scheme;\n\n        var responseBody = ''\n\n        const promise = new Promise((resolve, reject) => {\n            var request = http.request(options, function (response) {\n                response.setEncoding('utf8')\n\n                response.on('data', function (chunk) {\n                    responseBody += chunk\n                })\n\n                response.on('end', function () {\n                    xml2js.parseString(responseBody, xml2jsOptions, function (err, result) {\n                        if (callback) callback(err, result, responseBody)\n                        else if (err) reject(err)\n                        else resolve({\n                            result,\n                            responseBody\n                        })\n                    })\n                })\n\n            })\n\n            request.on('error', function (err) {\n                if (callback) callback(err)\n                else reject(err)\n            })\n\n            request.end()\n        })\n\n        if (!callback) return promise\n    }\n}\n\nOperationHelper.version = '2013-08-01'\nOperationHelper.service = 'AWSECommerceService'\nOperationHelper.defaultBaseUri = '/onca/xml'\n\nexports.OperationHelper = OperationHelper\n","/home/travis/build/npmtest/node-npmtest-apac/node_modules/apac/lib/request-signature-helper.js":"\"use strict\"\n\nvar crypto = require('crypto')\n\nclass RSH {\n    constructor(params) {\n        this.init(params)\n    }\n\n    init(params) {\n        // enforce required params\n        if (typeof(params[RSH.kAWSAccessKeyId]) === 'undefined') {\n            throw new Error('Need access key id argument')\n        }\n        if (typeof(params[RSH.kAWSSecretKey]) === 'undefined') {\n            throw new Error('Need secret key argument')\n        }\n        if (typeof(params[RSH.kEndPoint]) === 'undefined') {\n            throw new Error('Need end point argument')\n        }\n\n        // set params\n        this[RSH.kAWSAccessKeyId] = params[RSH.kAWSAccessKeyId]\n        this[RSH.kAWSSecretKey] = params[RSH.kAWSSecretKey]\n        this[RSH.kEndPoint] = params[RSH.kEndPoint].toLowerCase()\n        this[RSH.kRequestMethod] = params[RSH.kRequestMethod] || 'GET'\n        this[RSH.kRequestUri] = params[RSH.kRequestUri] || '/onca/xml'\n    }\n\n    sign(params) {\n        // append params\n        params[RSH.kTimestampParam] = this.generateTimestamp()\n        // generate signature\n        var canonical = this.canonicalize(params)\n        var stringToSign = [\n            this[RSH.kRequestMethod],\n            this[RSH.kEndPoint],\n            this[RSH.kRequestUri],\n            canonical\n        ].join('\\n')\n        params[RSH.kSignatureParam] = this.digest(stringToSign)\n\n        return params\n    }\n\n    zeroPad(num, length) {\n        num = num + ''\n        while (num.length < length) {\n            num = '0' + num\n        }\n        return num\n    }\n\n    generateTimestamp() {\n        var now = new Date(),\n            year = now.getUTCFullYear(),\n            month = this.zeroPad(now.getUTCMonth() + 1, 2),\n            day = this.zeroPad(now.getUTCDate(), 2),\n            hours = this.zeroPad(now.getUTCHours(), 2),\n            mins = this.zeroPad(now.getUTCMinutes(), 2),\n            secs = this.zeroPad(now.getUTCSeconds(), 2)\n        return [year, month, day].join('-') + 'T' +\n            [hours, mins, secs].join(':') + 'Z'\n    }\n\n\n    /**\n     * Port of PHP rawurlencode().\n     */\n    escape(x) {\n        return encodeURIComponent(x).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/\\*/g, '%2A')\n    }\n\n    digest(x) {\n        var secretKey = this[RSH.kAWSSecretKey]\n        var hmac = crypto.createHmac('sha256', secretKey)\n        hmac.update(x)\n        return hmac.digest('base64')\n    }\n\n    canonicalize(params) {\n        var parts = []\n        for (var key in params) {\n            parts.push([this.escape(key), this.escape(params[key])].join('='))\n        }\n        return parts.sort().join('&')\n    }\n}\n\nRSH.kAWSAccessKeyId = 'AWSAccessKeyId'\nRSH.kAWSSecretKey = 'AWSSecretKey'\nRSH.kEndPoint = 'EndPoint'\nRSH.kRequestMethod = 'RequestMethod'\nRSH.kRequestUri = 'RequestUri'\nRSH.kTimestampParam = 'Timestamp'\nRSH.kSignatureParam = 'Signature'\n\nexports.RequestSignatureHelper = RSH","/home/travis/build/npmtest/node-npmtest-apac/node_modules/apac/lib/throttler.js":"\"use strict\"\n\nconst getNowMillis = () => {\n    return (new Date()).getTime()\n}\n\nclass Throttler {\n    constructor(maxRequestsPerSecond) {\n        this.maxRequestsPerSecond = maxRequestsPerSecond || 0\n        this._timeBetweenRequestsInMilliSeconds = 1 / this.maxRequestsPerSecond * 1000\n        this._nextAvailableRequestMillis = getNowMillis()\n    }\n    \n    execute(cb) {\n        let nowMillis = getNowMillis()\n        if (this.maxRequestsPerSecond === 0) {\n            return Promise.resolve(cb())\n        } else if (nowMillis >= this._nextAvailableRequestMillis) {\n            this._nextAvailableRequestMillis = getNowMillis() + this._timeBetweenRequestsInMilliSeconds\n            return Promise.resolve(cb())\n        } else {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(cb())\n                }, this._nextAvailableRequestMillis - nowMillis)\n                this._nextAvailableRequestMillis += this._timeBetweenRequestsInMilliSeconds\n            })\n        }\n    }\n}\n\nmodule.exports = Throttler","/home/travis/build/npmtest/node-npmtest-apac/node_modules/apac/lib/locale.js":"\"use strict\"\n\nconst ENDPOINTS_BY_LOCALE = {\n    BR: 'webservices.amazon.com.br',\n    CA: 'webservices.amazon.ca',\n    CN: 'webservices.amazon.cn',\n    FR: 'webservices.amazon.fr',\n    DE: 'webservices.amazon.de',\n    IN: 'webservices.amazon.in',\n    IT: 'webservices.amazon.it',\n    JP: 'webservices.amazon.co.jp',\n    MX: 'webservices.amazon.com.mx',\n    ES: 'webservices.amazon.es',\n    UK: 'webservices.amazon.co.uk',\n    US: 'webservices.amazon.com'\n}\n\nconst DEFAULT_ENDPOINT = ENDPOINTS_BY_LOCALE['US']\n\nexports.getEndpointForLocale = (locale) => {\n    return ENDPOINTS_BY_LOCALE[locale] || DEFAULT_ENDPOINT\n}\n\nexports.DEFAULT_ENDPOINT = DEFAULT_ENDPOINT","/home/travis/build/npmtest/node-npmtest-apac/node_modules/apac/lib/operation-helper.specs.js":"\"use strict\"\n\nconst http = require('http')\nconst EventEmitter = require('events')\nconst xml2js = require('xml2js')\nconst proxyquire = require('proxyquire')\nconst RSH = require('./request-signature-helper').RequestSignatureHelper\n\nconst OperationHelper = require('./operation-helper').OperationHelper\nconst locale = require('./locale')\n\nconst getNowMillis = () => {\n    return (new Date()).getTime()\n}\n\ndescribe('OperationHelper', function () {\n    const awsId = 'testAwsId'\n    const awsSecret = 'testAwsSecret'\n    const assocId = 'testAssocId'\n\n    let baseParams = {\n        awsId,\n        awsSecret,\n        assocId\n    }\n\n    describe('#constructor', () => {\n        it('sets correct default endpoint', () => {\n            let opHelper = new OperationHelper(baseParams)\n            expect(opHelper.endPoint).to.equal('webservices.amazon.com')\n        })\n\n        it('sets endpoint by locale', () => {\n            let opHelper = new OperationHelper(Object.assign({}, baseParams, {\n                locale: 'IT'\n            }))\n            expect(opHelper.endPoint).to.equal('webservices.amazon.it')\n        })\n\n        it('sets endpoint directly', () => {\n            let opHelper = new OperationHelper(Object.assign({}, baseParams, {\n                locale: 'IT',\n                endPoint: 'test.endpoint.com'\n            }))\n            expect(opHelper.endPoint).to.equal('test.endpoint.com')\n        })\n\n        it('sets scheme directly', () => {\n            let opHelper = new OperationHelper(Object.assign({}, baseParams, {\n                scheme: 'http'\n            }))\n            expect(opHelper.scheme).to.equal('http')\n        })\n    })\n\n    describe('#getSignatureHelper', () => {\n        const mockRSHInstance = {}\n        let mockRSHConstructor\n        let OperationHelper2, initialSignatureHelper, secondSignatureHelper\n\n        before(() => {\n            mockRSHConstructor = sinon.stub().returns(mockRSHInstance)\n            mockRSHConstructor.kAWSAccessKeyId = RSH.kAWSAccessKeyId\n            mockRSHConstructor.kAWSSecretKey = RSH.kAWSSecretKey\n            mockRSHConstructor.kEndPoint = RSH.kEndPoint\n\n            OperationHelper2 = proxyquire('./operation-helper', {\n                './request-signature-helper': {\n                    RequestSignatureHelper: mockRSHConstructor\n                }\n            }).OperationHelper\n\n            let opHelper = new OperationHelper2(baseParams)\n\n            initialSignatureHelper = opHelper.getSignatureHelper()\n            secondSignatureHelper = opHelper.getSignatureHelper()\n        })\n\n        it('should return a singleton of the signature helper', () => {\n            expect(secondSignatureHelper).to.equal(initialSignatureHelper)\n        })\n\n        it('should construct the signature helper with the right parameters', () => {\n            expect(mockRSHConstructor.firstCall.args[0]).to.eql({\n                [RSH.kAWSAccessKeyId]: awsId,\n                [RSH.kAWSSecretKey]: awsSecret,\n                [RSH.kEndPoint]: locale.DEFAULT_ENDPOINT\n            })\n        })\n    })\n\n    describe('#generateParams', () => {\n        let actual, expected\n        const operation = 'testOperation'\n\n        before(() => {\n            expected = {\n                Service: OperationHelper.service,\n                Version: OperationHelper.version,\n                Operation: operation,\n                AWSAccessKeyId: awsId,\n                AssociateTag: assocId\n            }\n\n            let opHelper = new OperationHelper(baseParams)\n            actual = opHelper.generateParams(operation, {})\n        })\n\n        it('should construct the correct params', () => {\n            expect(actual).to.eql(expected)\n        })\n    })\n\n    describe('#generateUri', () => {\n        const operation = 'testOperation'\n        const params = {foo: 'bar'}\n        let opHelper, mockSignatureHelper, actual, expected\n\n        before(() => {\n            opHelper = new OperationHelper(baseParams)\n\n            sinon.stub(opHelper, 'generateParams').returnsArg(1)\n\n            mockSignatureHelper = {\n                sign: sinon.stub().returnsArg(0),\n                canonicalize: sinon.stub().returns('canonicalParams')\n            }\n            sinon.stub(opHelper, 'getSignatureHelper').returns(mockSignatureHelper)\n\n            actual = opHelper.generateUri(operation, params)\n        })\n\n        it('should call generateParams correctly', () => {\n            expect(opHelper.generateParams.firstCall.args[0]).to.eql(operation)\n            expect(opHelper.generateParams.firstCall.args[1]).to.equal(params)\n        })\n\n        it('should sign the params', () => {\n            expect(mockSignatureHelper.sign.firstCall.args[0]).to.eql(params)\n        })\n\n        it('should canonicalize the params', () => {\n            expect(mockSignatureHelper.canonicalize.firstCall.args[0]).to.eql(params)\n        })\n\n        it('returns the correct uri', () => {\n            expect(actual).to.equal('/onca/xml?canonicalParams')\n        })\n    })\n\n    describe('#execute', () => {\n        let requestMock, responseMock, result, outputResponseBody\n        const responseBody = '<it><is><some>xml</some></is></it>'\n        const xml2jsOptions = {foo: 'bar'}\n        const expectedXml2jsOptions = Object.assign({explicitArray: false}, xml2jsOptions)\n\n        context('happy path', () => {\n            let opHelper\n\n            beforeEach(() => {\n                opHelper = new OperationHelper({\n                    awsId: 'testAwsId',\n                    awsSecret: 'testAwsSecret',\n                    assocId: 'testAssocId',\n                    scheme: 'http',\n                    xml2jsOptions\n                })\n\n                responseMock = new EventEmitter()\n                responseMock.setEncoding = sinon.spy()\n\n                requestMock = new EventEmitter()\n                requestMock.end = () => {\n                    responseMock.emit('data', responseBody.substr(0, 5))\n                    responseMock.emit('data', responseBody.substr(5))\n                    responseMock.emit('end')\n                }\n\n                sinon.stub(http, 'request').returns(requestMock).callsArgWith(1, responseMock)\n                sinon.stub(opHelper, 'generateUri').returns('testUri')\n                sinon.spy(xml2js, 'parseString')\n            })\n\n            afterEach(() => {\n                http.request.restore()\n                xml2js.parseString.restore()\n            })\n\n            const doAssertions = () => {\n                it('should creqte an http request with the correct options', () => {\n                    expect(http.request.callCount).to.equal(1)\n                    expect(http.request.firstCall.args[0]).to.eql({\n                        hostname: locale.DEFAULT_ENDPOINT,\n                        method: 'GET',\n                        path: 'testUri',\n                        scheme: 'http'\n                    })\n                })\n\n                it('should set the response encoding to utf8', () => {\n                    expect(responseMock.setEncoding.calledWith('utf8'))\n                })\n\n                it('should provide the raw response body', () => {\n                    expect(outputResponseBody).to.equal(responseBody)\n                })\n\n                it('should pass the xml2jsOptions to xml2js', () => {\n                    expect(xml2js.parseString.firstCall.args[1]).to.eql(expectedXml2jsOptions)\n                })\n\n                it('should parse XML and return result as object', () => {\n                    expect(result).to.eql({\n                        it: {\n                            is: {\n                                some: 'xml'\n                            }\n                        }\n                    })\n                })\n            }\n\n            context('(traditional callback)', () => {\n                beforeEach((done) => {\n                    opHelper.execute('ItemSearch', {\n                        'SearchIndex': 'Books',\n                        'Keywords': 'harry potter',\n                        'ResponseGroup': 'ItemAttributes,Offers'\n                    }, function (err, _results, _rawResponseBody) {\n                        result = _results\n                        outputResponseBody = _rawResponseBody\n                        done()\n                    })\n                })\n\n                doAssertions()\n            })\n\n            context('(promise)', () => {\n                beforeEach(() => {\n                    return opHelper.execute('ItemSearch', {\n                        'SearchIndex': 'Books',\n                        'Keywords': 'harry potter',\n                        'ResponseGroup': 'ItemAttributes,Offers'\n                    }).then((response) => {\n                        result = response.result\n                        outputResponseBody = response.responseBody\n                    })\n                })\n\n                doAssertions()\n            })\n        })\n\n        context('when the request has an error', () => {\n            const error = new Error('testErrorMessage')\n            let thrownError, opHelper\n\n            beforeEach(() => {\n                opHelper = new OperationHelper({\n                    awsId: 'testAwsId',\n                    awsSecret: 'testAwsSecret',\n                    assocId: 'testAssocId'\n                })\n\n                responseMock = new EventEmitter()\n                responseMock.setEncoding = sinon.spy()\n\n                requestMock = new EventEmitter()\n                requestMock.end = () => {\n                    requestMock.emit('error', error)\n                }\n\n                sinon.stub(http, 'request').returns(requestMock).callsArgWith(1, responseMock)\n                sinon.stub(opHelper, 'generateUri').returns('testUri')\n            })\n\n            afterEach(() => {\n                http.request.restore()\n            })\n\n            context('(traditional callback)', () => {\n                beforeEach((done) => {\n                    opHelper.execute('ItemSearch', {\n                        'SearchIndex': 'Books',\n                        'Keywords': 'harry potter',\n                        'ResponseGroup': 'ItemAttributes,Offers'\n                    }, function (err) {\n                        thrownError = err\n                        done()\n                    })\n                })\n\n                it('should call the callback with the error', () => {\n                    expect(thrownError).to.equal(error)\n                })\n            })\n\n            context('(promise)', () => {\n                beforeEach(() => {\n                    return opHelper.execute('ItemSearch', {\n                        'SearchIndex': 'Books',\n                        'Keywords': 'harry potter',\n                        'ResponseGroup': 'ItemAttributes,Offers'\n                    }).catch((err) => {\n                        thrownError = err\n                    })\n                })\n\n                it('should call the callback with the error', () => {\n                    expect(thrownError).to.equal(error)\n                })\n            })\n        })\n\n        context('when there is an error parsing the response', () => {\n            const malformedResponseBody = '<it><is><some>xml</some* 4$></is></it>'\n            const testError = new Error('test error')\n            let returnedError, opHelper\n\n            beforeEach(() => {\n                opHelper = new OperationHelper({\n                    awsId: 'testAwsId',\n                    awsSecret: 'testAwsSecret',\n                    assocId: 'testAssocId'\n                })\n\n                responseMock = new EventEmitter()\n                responseMock.setEncoding = sinon.spy()\n\n                requestMock = new EventEmitter()\n                requestMock.end = () => {\n                    responseMock.emit('data', malformedResponseBody)\n                    responseMock.emit('end')\n                }\n\n                sinon.stub(http, 'request').returns(requestMock).callsArgWith(1, responseMock)\n                sinon.stub(opHelper, 'generateUri').returns('testUri')\n                sinon.stub(xml2js, 'parseString').callsArgWith(2, testError)\n            })\n\n            afterEach(() => {\n                http.request.restore()\n                xml2js.parseString.restore()\n            })\n\n            context('(traditional callback)', () => {\n                beforeEach((done) => {\n                    opHelper.execute('ItemSearch', {\n                        'SearchIndex': 'Books',\n                        'Keywords': 'harry potter',\n                        'ResponseGroup': 'ItemAttributes,Offers'\n                    }, function (err) {\n                        returnedError = err\n                        done()\n                    })\n                })\n\n                it('should call the callback with the error', () => {\n                    expect(returnedError).to.equal(testError)\n                })\n            })\n\n            context('(promise)', () => {\n                beforeEach(() => {\n                    return opHelper.execute('ItemSearch', {\n                        'SearchIndex': 'Books',\n                        'Keywords': 'harry potter',\n                        'ResponseGroup': 'ItemAttributes,Offers'\n                    }).catch((err) => {\n                        returnedError = err\n                    })\n                })\n\n                it('should call the callback with the error', () => {\n                    expect(returnedError).to.equal(testError)\n                })\n            })\n        })\n\n        context('when throttling is necessary', () => {\n            let opHelper, startTimeMillis\n\n            beforeEach(() => {\n                opHelper = new OperationHelper(Object.assign({}, baseParams, {\n                    maxRequestsPerSecond: 10\n                }))\n\n                const buildReqAndResp = () => {\n                    let responseMock = new EventEmitter()\n                    responseMock.setEncoding = sinon.spy()\n\n                    let requestMock = new EventEmitter()\n                    requestMock.end = () => {\n                        responseMock.emit('data', responseBody)\n                        responseMock.emit('end')\n                    }\n\n                    return {\n                        req: requestMock,\n                        res: responseMock\n                    }\n                }\n\n                sinon.stub(http, 'request')\n                const reqRes1 = buildReqAndResp()\n                const reqRes2 = buildReqAndResp()\n                const reqRes3 = buildReqAndResp()\n                http.request.onFirstCall().callsArgWith(1, reqRes1.res).returns(reqRes1.req)\n                http.request.onSecondCall().callsArgWith(1, reqRes2.res).returns(reqRes2.req)\n                http.request.onThirdCall().callsArgWith(1, reqRes3.res).returns(reqRes3.req)\n\n                sinon.stub(opHelper, 'generateUri').returns('testUri')\n\n                const operation = 'ItemSearch'\n                const params = {\n                    'SearchIndex': 'Books',\n                    'Keywords': 'harry potter',\n                    'ResponseGroup': 'ItemAttributes,Offers'\n                }\n\n                startTimeMillis = getNowMillis()\n                return Promise.all([\n                    opHelper.execute(operation, params),\n                    opHelper.execute(operation, params),\n                    opHelper.execute(operation, params)\n                ])\n            })\n\n            afterEach(() => {\n                http.request.restore()\n            })\n\n            it('should take at least (1 / maxRequestsPerSecond) * (numOperations - 1) seconds to complete', () => {\n                const durationMillis = getNowMillis() - startTimeMillis\n                expect(durationMillis).to.be.at.least(199)\n                expect(durationMillis).to.be.at.most(300)\n            })\n        })\n    })\n})\n","/home/travis/build/npmtest/node-npmtest-apac/node_modules/apac/lib/request-signature-helper.specs.js":"\"use strict\"\n\nvar assert = require('assert'),\n    RSH = require('./request-signature-helper').RequestSignatureHelper\n\ndescribe('RequestSignatureHelper', () => {\n    let rsh\n    const secretKey = 'this is a secret key'\n    const accessKeyId = 'this is an access key'\n    const endPoint = ''\n    const params = {\n        [RSH.kAWSAccessKeyId]: accessKeyId,\n        [RSH.kAWSSecretKey]: secretKey,\n        [RSH.kEndPoint]: endPoint\n    }\n\n    before(() => {\n        rsh = new RSH(params)\n    })\n\n    it('should create an instance', () => {\n        expect(rsh).to.be.an.instanceOf(RSH)\n    })\n\n    describe('#canonicalize', () => {\n        it('should return a string', () => {\n            expect(rsh.canonicalize({'a': 'b'})).to.be.a('string')\n        })\n\n        it('should produce a query string format', () => {\n            expect(rsh.canonicalize({'a': 'b'})).to.equal('a=b')\n        })\n\n        it('should produce a query string with multiple parameters', () => {\n            expect(rsh.canonicalize({'a': 'b', 'c': 'd'})).to.equal('a=b&c=d')\n        })\n\n        it('should sort the parameters', () => {\n            expect(rsh.canonicalize({'f': 'b', 'a': 'q'})).to.equal('a=q&f=b')\n        })\n    })\n\n    describe('#digest', () => {\n        let testStr = 'this is a test string'\n        let digest = 'faew2bQnf2IfFY9Wm8CrIL6AWWp6N+2JFOEwEmMJyKA='\n\n        it('should return a string', () => {\n            expect(rsh.digest(testStr)).to.be.a('string')\n        })\n\n        it('should create the correct digest', () => {\n            expect(rsh.digest(testStr)).to.equal(digest)\n        })\n    })\n\n    describe('#zeroPad', () => {\n        it('should pad correctly', () => {\n            expect(rsh.zeroPad(1, 3)).to.equal('001')\n        })\n    })\n\n    describe('#generateTimestamp', () => {\n        it('should format the timestamp correctly', () => {\n            expect(rsh.generateTimestamp()).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/)\n        })\n    })\n\n    describe('#sign', () => {\n        let params\n\n        before(() => {\n            params = rsh.sign({'d': 'a', 'c': 'f'});\n        })\n\n        it('should return an object', () => {\n            expect(params).to.be.an('object')\n        })\n\n        it('should add timestamp to the params', () => {\n            expect(params[RSH.kTimestampParam]).to.be.a('string')\n            expect(params[RSH.kTimestampParam]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/)\n        })\n\n        it('should add signature to the params', () => {\n            expect(params[RSH.kSignatureParam]).to.be.a('string')\n        })\n    })\n})"}